/**
 * مدیریت پیشرفته فرانت-اند پنل تنظیمات سئوکار
 * 
 * @package    Seokar
 * @subpackage Admin
 * @author     Sajjad Akbari 
 * @license    GPL-3.0+
 * @version    2.0.0
 * @copyright  2025 تیم سئوکار
 */

class SeokarAdminPanel {
  constructor() {
    this.version = '2.0.0';
    this.cachedElements = {};
    this.ajaxQueue = [];
    this.isProcessing = false;
    this.debounceTimers = {};
    this.init();
  }

  /**
   * مقداردهی اولیه کلاس
   */
  init() {
    try {
      this.cacheDOM();
      this.setupEventListeners();
      this.initComponents();
      this.setupMutationObserver();
      this.checkDependencies();
      this.restoreState();
      console.info('Seokar Admin Panel initialized successfully');
    } catch (error) {
      console.error('Initialization error:', error);
      this.showSystemError(error);
    }
  }

  /**
   * کش کردن عناصر DOM
   */
  cacheDOM() {
    this.cachedElements = {
      $wrap: $('.seokar-settings-wrap'),
      $forms: $('.seokar-settings-form'),
      $tabs: $('.seokar-settings-tabs'),
      $tabContents: $('.seokar-tab-content'),
      $submitButtons: $('.seokar-submit-button'),
      $spinner: $('.seokar-spinner'),
      $noticesContainer: $('.seokar-notices-container')
    };
  }

  /**
   * تنظیم رویدادها
   */
  setupEventListeners() {
    // رویدادهای عمومی
    $(document)
      .on('click', '.seokar-settings-tab', this.handleTabSwitch.bind(this))
      .on('submit', '.seokar-settings-form', this.handleFormSubmit.bind(this))
      .on('click', '.seokar-reset-section', this.handleSectionReset.bind(this))
      .on('change', '[data-conditional-trigger]', this.handleConditionalFields.bind(this))
      .on('click', '.seokar-media-upload', this.handleMediaUpload.bind(this))
      .on('click', '.seokar-media-remove', this.handleMediaRemove.bind(this))
      .on('click', '.seokar-test-api', this.handleApiTest.bind(this))
      .on('click', '.seokar-import-export', this.handleImportExport.bind(this))
      .on('input', '[data-character-counter]', this.updateCharacterCount.bind(this))
      .on('click', '.seokar-dismiss-notice', this.handleNoticeDismiss.bind(this));

    // رویدادهای کیبورد
    $(document).on('keydown', this.handleKeyboardShortcuts.bind(this));

    // رویدادهای سفارشی
    $(document).on('seokar_settings_changed', this.handleSettingsChange.bind(this));
  }

  /**
   * مقداردهی کامپوننت‌ها
   */
  initComponents() {
    this.initTabs();
    this.initColorPickers();
    this.initMediaUploaders();
    this.initCodeEditors();
    this.initTooltips();
    this.initSortables();
    this.initRepeaters();
    this.initSelect2();
    this.initDatePickers();
    this.initConditionalFields();
  }

  /**
   * سیستم تب‌ها
   */
  initTabs() {
    if (this.cachedElements.$tabs.length) {
      const currentTab = seokarOptions.currentTab || 'general';
      const tabIndex = this.getTabIndex(currentTab);
      
      this.cachedElements.$tabContents.tabs({
        active: tabIndex,
        activate: (event, ui) => {
          this.updateUrlHash(ui.newPanel.attr('id'));
          this.lazyLoadTabContent(ui.newPanel);
        },
        classes: {
          "ui-tabs-active": "active"
        }
      });

      // پیش‌بارگذاری محتوای تب اول
      this.lazyLoadTabContent(this.cachedElements.$tabContents.find('.ui-tabs-panel').eq(tabIndex));
    }
  }

  /**
   * سیستم رنگ‌ها
   */
  initColorPickers() {
    $('.seokar-color-picker').each((index, element) => {
      const $element = $(element);
      $element.wpColorPicker({
        defaultColor: $element.data('default-color') || '#ffffff',
        change: (event, ui) => this.debounce('color_change', () => this.onColorChange(event, ui), 300),
        clear: () => this.onColorClear($element)
      });
    });
  }

  /**
   * آپلودر مدیا
   */
  initMediaUploaders() {
    $('.seokar-media-upload[data-init="false"]').each((index, element) => {
      const $element = $(element);
      $element.attr('data-init', 'true');
      
      // پیاده‌سازی در handleMediaUpload
    });
  }

  /**
   * ادیتورهای کد
   */
  initCodeEditors() {
    if (typeof wp.codeEditor === 'undefined') return;

    $('.seokar-code-editor').each((index, element) => {
      const $textarea = $(element);
      const editorSettings = {
        codemirror: {
          mode: $textarea.data('mode') || 'htmlmixed',
          lineNumbers: true,
          lineWrapping: true,
          indentUnit: 4,
          tabSize: 4,
          theme: 'default',
          extraKeys: { "Ctrl-Space": "autocomplete" },
          gutters: ["CodeMirror-lint-markers"],
          lint: true
        }
      };

      const editor = wp.codeEditor.initialize($textarea, editorSettings);
      editor.codemirror.on('change', () => {
        $textarea.val(editor.codemirror.getValue()).trigger('change');
      });
    });
  }

  /**
   * راهنماهای ابزاری
   */
  initTooltips() {
    $('.seokar-tooltip').tooltip({
      content() {
        return $(this).attr('title');
      },
      position: {
        my: "center bottom-20",
        at: "center top",
        using(position, feedback) {
          $(this).css(position);
          $("<div>")
            .addClass("arrow " + feedback.vertical)
            .addClass(feedback.horizontal)
            .appendTo(this);
        }
      },
      show: { duration: 200 },
      hide: { duration: 100 }
    });
  }

  /**
   * فیلدهای شرطی
   */
  initConditionalFields() {
    $('[data-conditional-trigger]').each((index, element) => {
      this.evaluateConditionalField($(element));
    });
  }

  /**
   * سیستم تغییر تب
   */
  handleTabSwitch(event) {
    event.preventDefault();
    const $tab = $(event.currentTarget);
    const tabId = new URL($tab.attr('href')).searchParams.get('tab');

    if (!tabId || this.isProcessing) return;

    this.isProcessing = true;
    this.cachedElements.$tabs.find('.active').removeClass('active');
    $tab.addClass('active');

    this.loadTabContent(tabId)
      .then(content => {
        this.cachedElements.$tabContents.html(content);
        this.initComponents();
        this.saveState();
      })
      .catch(error => {
        console.error('Tab loading error:', error);
        this.showError('خطا در بارگذاری تب');
      })
      .finally(() => {
        this.isProcessing = false;
      });
  }

  /**
   * مدیریت ارسال فرم
   */
  handleFormSubmit(event) {
    event.preventDefault();
    const $form = $(event.currentTarget);
    const formData = new FormData($form[0]);

    if (!this.validateForm($form)) return;

    this.showLoading($form);

    const ajaxData = {
      action: 'seokar_save_settings',
      tab: seokarOptions.currentTab,
      form_data: Object.fromEntries(formData),
      _wpnonce: seokarOptions.nonce
    };

    this.enqueueAjaxRequest({
      url: seokarOptions.ajax_url,
      data: ajaxData,
      method: 'POST',
      success: (response) => this.handleSaveSuccess(response, $form),
      error: (error) => this.handleSaveError(error, $form)
    });
  }

  /**
   * مدیریت صف درخواست‌های AJAX
   */
  enqueueAjaxRequest(request) {
    this.ajaxQueue.push(request);
    if (!this.isProcessing) {
      this.processAjaxQueue();
    }
  }

  processAjaxQueue() {
    if (this.ajaxQueue.length === 0) {
      this.isProcessing = false;
      return;
    }

    this.isProcessing = true;
    const request = this.ajaxQueue.shift();
    
    $.ajax({
      url: request.url,
      type: request.method,
      data: request.data,
      dataType: 'json',
      success: (response) => {
        request.success(response);
        this.processAjaxQueue();
      },
      error: (error) => {
        request.error(error);
        this.processAjaxQueue();
      }
    });
  }

  /**
   * مشاهده‌گر تغییرات DOM
   */
  setupMutationObserver() {
    const observer = new MutationObserver(mutations => {
      mutations.forEach(mutation => {
        if (mutation.type === 'childList') {
          this.initComponents();
        }
      });
    });

    observer.observe(this.cachedElements.$wrap[0], {
      childList: true,
      subtree: true
    });
  }

  /**
   * بررسی وابستگی‌ها
   */
  checkDependencies() {
    if (typeof wp === 'undefined' || typeof wp.media === 'undefined') {
      console.warn('WordPress media library is not loaded');
    }
    
    if (typeof CodeMirror === 'undefined') {
      console.warn('CodeMirror is not loaded');
    }
  }

  /**
   * بازیابی وضعیت قبلی
   */
  restoreState() {
    const savedState = localStorage.getItem('seokar_admin_state');
    if (savedState) {
      try {
        const state = JSON.parse(savedState);
        if (state.activeTab) {
          $(`.seokar-settings-tab[href*="tab=${state.activeTab}"]`).click();
        }
      } catch (e) {
        localStorage.removeItem('seokar_admin_state');
      }
    }
  }

  /**
   * ذخیره وضعیت فعلی
   */
  saveState() {
    const activeTab = this.getCurrentTab();
    const state = { activeTab };
    localStorage.setItem('seokar_admin_state', JSON.stringify(state));
  }

  /**
   * نمایش خطاها
   */
  showError(message, options = {}) {
    const defaults = {
      type: 'error',
      dismissible: true,
      duration: 5000
    };
    const settings = { ...defaults, ...options };
    
    const noticeId = 'seokar-notice-' + Date.now();
    const noticeHTML = `
      <div id="${noticeId}" class="notice notice-${settings.type} ${settings.dismissible ? 'is-dismissible' : ''}">
        <p>${message}</p>
        ${settings.dismissible ? '<button type="button" class="notice-dismiss"></button>' : ''}
      </div>
    `;
    
    this.cachedElements.$noticesContainer.append(noticeHTML);
    
    if (settings.duration > 0) {
      setTimeout(() => {
        $(`#${noticeId}`).fadeOut(() => $(this).remove());
      }, settings.duration);
    }
  }

  /**
   * متدهای کمکی
   */
  debounce(id, func, delay) {
    clearTimeout(this.debounceTimers[id]);
    this.debounceTimers[id] = setTimeout(func, delay);
  }

  getTabIndex(tabId) {
    return $(`.seokar-settings-tabs a`).index($(`.seokar-settings-tabs a[href*="tab=${tabId}"]`));
  }

  getCurrentTab() {
    return new URLSearchParams(window.location.search).get('tab') || 'general';
  }

  updateUrlHash(hash) {
    window.history.replaceState(null, null, `#${hash}`);
  }
}

// راه‌اندازی پس از بارگذاری کامل صفحه
jQuery(document).ready(function($) {
  if (typeof seokarOptions !== 'undefined') {
    window.seokarAdmin = new SeokarAdminPanel();
  } else {
    console.error('seokarOptions is not defined');
  }
});

// پشتیبانی از Customizer وردپرس
if (typeof wp !== 'undefined' && wp.customize) {
  wp.customize.bind('ready', function() {
    window.seokar/**
 * مدیریت پیشرفته فرانت-اند پنل تنظیمات سئوکار
 * 
 * @package    Seokar
 * @subpackage Admin
 * @author     Sajjad Akbari <sajjad.akbari.abc@gmail.com>
 * @license    GPL-3.0+
 * @version    2.0.0
 * @copyright  2024 تیم سئوکار
 */

class SeokarAdminPanel {
  constructor() {
    this.version = '2.0.0';
    this.cachedElements = {};
    this.ajaxQueue = [];
    this.isProcessing = false;
    this.debounceTimers = {};
    this.init();
  }

  /**
   * مقداردهی اولیه کلاس
   */
  init() {
    try {
      this.cacheDOM();
      this.setupEventListeners();
      this.initComponents();
      this.setupMutationObserver();
      this.checkDependencies();
      this.restoreState();
      console.info('Seokar Admin Panel initialized successfully');
    } catch (error) {
      console.error('Initialization error:', error);
      this.showSystemError(error);
    }
  }

  /**
   * کش کردن عناصر DOM
   */
  cacheDOM() {
    this.cachedElements = {
      $wrap: $('.seokar-settings-wrap'),
      $forms: $('.seokar-settings-form'),
      $tabs: $('.seokar-settings-tabs'),
      $tabContents: $('.seokar-tab-content'),
      $submitButtons: $('.seokar-submit-button'),
      $spinner: $('.seokar-spinner'),
      $noticesContainer: $('.seokar-notices-container')
    };
  }

  /**
   * تنظیم رویدادها
   */
  setupEventListeners() {
    // رویدادهای عمومی
    $(document)
      .on('click', '.seokar-settings-tab', this.handleTabSwitch.bind(this))
      .on('submit', '.seokar-settings-form', this.handleFormSubmit.bind(this))
      .on('click', '.seokar-reset-section', this.handleSectionReset.bind(this))
      .on('change', '[data-conditional-trigger]', this.handleConditionalFields.bind(this))
      .on('click', '.seokar-media-upload', this.handleMediaUpload.bind(this))
      .on('click', '.seokar-media-remove', this.handleMediaRemove.bind(this))
      .on('click', '.seokar-test-api', this.handleApiTest.bind(this))
      .on('click', '.seokar-import-export', this.handleImportExport.bind(this))
      .on('input', '[data-character-counter]', this.updateCharacterCount.bind(this))
      .on('click', '.seokar-dismiss-notice', this.handleNoticeDismiss.bind(this));

    // رویدادهای کیبورد
    $(document).on('keydown', this.handleKeyboardShortcuts.bind(this));

    // رویدادهای سفارشی
    $(document).on('seokar_settings_changed', this.handleSettingsChange.bind(this));
  }

  /**
   * مقداردهی کامپوننت‌ها
   */
  initComponents() {
    this.initTabs();
    this.initColorPickers();
    this.initMediaUploaders();
    this.initCodeEditors();
    this.initTooltips();
    this.initSortables();
    this.initRepeaters();
    this.initSelect2();
    this.initDatePickers();
    this.initConditionalFields();
  }

  /**
   * سیستم تب‌ها
   */
  initTabs() {
    if (this.cachedElements.$tabs.length) {
      const currentTab = seokarOptions.currentTab || 'general';
      const tabIndex = this.getTabIndex(currentTab);
      
      this.cachedElements.$tabContents.tabs({
        active: tabIndex,
        activate: (event, ui) => {
          this.updateUrlHash(ui.newPanel.attr('id'));
          this.lazyLoadTabContent(ui.newPanel);
        },
        classes: {
          "ui-tabs-active": "active"
        }
      });

      // پیش‌بارگذاری محتوای تب اول
      this.lazyLoadTabContent(this.cachedElements.$tabContents.find('.ui-tabs-panel').eq(tabIndex));
    }
  }

  /**
   * سیستم رنگ‌ها
   */
  initColorPickers() {
    $('.seokar-color-picker').each((index, element) => {
      const $element = $(element);
      $element.wpColorPicker({
        defaultColor: $element.data('default-color') || '#ffffff',
        change: (event, ui) => this.debounce('color_change', () => this.onColorChange(event, ui), 300),
        clear: () => this.onColorClear($element)
      });
    });
  }

  /**
   * آپلودر مدیا
   */
  initMediaUploaders() {
    $('.seokar-media-upload[data-init="false"]').each((index, element) => {
      const $element = $(element);
      $element.attr('data-init', 'true');
      
      // پیاده‌سازی در handleMediaUpload
    });
  }

  /**
   * ادیتورهای کد
   */
  initCodeEditors() {
    if (typeof wp.codeEditor === 'undefined') return;

    $('.seokar-code-editor').each((index, element) => {
      const $textarea = $(element);
      const editorSettings = {
        codemirror: {
          mode: $textarea.data('mode') || 'htmlmixed',
          lineNumbers: true,
          lineWrapping: true,
          indentUnit: 4,
          tabSize: 4,
          theme: 'default',
          extraKeys: { "Ctrl-Space": "autocomplete" },
          gutters: ["CodeMirror-lint-markers"],
          lint: true
        }
      };

      const editor = wp.codeEditor.initialize($textarea, editorSettings);
      editor.codemirror.on('change', () => {
        $textarea.val(editor.codemirror.getValue()).trigger('change');
      });
    });
  }

  /**
   * راهنماهای ابزاری
   */
  initTooltips() {
    $('.seokar-tooltip').tooltip({
      content() {
        return $(this).attr('title');
      },
      position: {
        my: "center bottom-20",
        at: "center top",
        using(position, feedback) {
          $(this).css(position);
          $("<div>")
            .addClass("arrow " + feedback.vertical)
            .addClass(feedback.horizontal)
            .appendTo(this);
        }
      },
      show: { duration: 200 },
      hide: { duration: 100 }
    });
  }

  /**
   * فیلدهای شرطی
   */
  initConditionalFields() {
    $('[data-conditional-trigger]').each((index, element) => {
      this.evaluateConditionalField($(element));
    });
  }

  /**
   * سیستم تغییر تب
   */
  handleTabSwitch(event) {
    event.preventDefault();
    const $tab = $(event.currentTarget);
    const tabId = new URL($tab.attr('href')).searchParams.get('tab');

    if (!tabId || this.isProcessing) return;

    this.isProcessing = true;
    this.cachedElements.$tabs.find('.active').removeClass('active');
    $tab.addClass('active');

    this.loadTabContent(tabId)
      .then(content => {
        this.cachedElements.$tabContents.html(content);
        this.initComponents();
        this.saveState();
      })
      .catch(error => {
        console.error('Tab loading error:', error);
        this.showError('خطا در بارگذاری تب');
      })
      .finally(() => {
        this.isProcessing = false;
      });
  }

  /**
   * مدیریت ارسال فرم
   */
  handleFormSubmit(event) {
    event.preventDefault();
    const $form = $(event.currentTarget);
    const formData = new FormData($form[0]);

    if (!this.validateForm($form)) return;

    this.showLoading($form);

    const ajaxData = {
      action: 'seokar_save_settings',
      tab: seokarOptions.currentTab,
      form_data: Object.fromEntries(formData),
      _wpnonce: seokarOptions.nonce
    };

    this.enqueueAjaxRequest({
      url: seokarOptions.ajax_url,
      data: ajaxData,
      method: 'POST',
      success: (response) => this.handleSaveSuccess(response, $form),
      error: (error) => this.handleSaveError(error, $form)
    });
  }

  /**
   * مدیریت صف درخواست‌های AJAX
   */
  enqueueAjaxRequest(request) {
    this.ajaxQueue.push(request);
    if (!this.isProcessing) {
      this.processAjaxQueue();
    }
  }

  processAjaxQueue() {
    if (this.ajaxQueue.length === 0) {
      this.isProcessing = false;
      return;
    }

    this.isProcessing = true;
    const request = this.ajaxQueue.shift();
    
    $.ajax({
      url: request.url,
      type: request.method,
      data: request.data,
      dataType: 'json',
      success: (response) => {
        request.success(response);
        this.processAjaxQueue();
      },
      error: (error) => {
        request.error(error);
        this.processAjaxQueue();
      }
    });
  }

  /**
   * مشاهده‌گر تغییرات DOM
   */
  setupMutationObserver() {
    const observer = new MutationObserver(mutations => {
      mutations.forEach(mutation => {
        if (mutation.type === 'childList') {
          this.initComponents();
        }
      });
    });

    observer.observe(this.cachedElements.$wrap[0], {
      childList: true,
      subtree: true
    });
  }

  /**
   * بررسی وابستگی‌ها
   */
  checkDependencies() {
    if (typeof wp === 'undefined' || typeof wp.media === 'undefined') {
      console.warn('WordPress media library is not loaded');
    }
    
    if (typeof CodeMirror === 'undefined') {
      console.warn('CodeMirror is not loaded');
    }
  }

  /**
   * بازیابی وضعیت قبلی
   */
  restoreState() {
    const savedState = localStorage.getItem('seokar_admin_state');
    if (savedState) {
      try {
        const state = JSON.parse(savedState);
        if (state.activeTab) {
          $(`.seokar-settings-tab[href*="tab=${state.activeTab}"]`).click();
        }
      } catch (e) {
        localStorage.removeItem('seokar_admin_state');
      }
    }
  }

  /**
   * ذخیره وضعیت فعلی
   */
  saveState() {
    const activeTab = this.getCurrentTab();
    const state = { activeTab };
    localStorage.setItem('seokar_admin_state', JSON.stringify(state));
  }

  /**
   * نمایش خطاها
   */
  showError(message, options = {}) {
    const defaults = {
      type: 'error',
      dismissible: true,
      duration: 5000
    };
    const settings = { ...defaults, ...options };
    
    const noticeId = 'seokar-notice-' + Date.now();
    const noticeHTML = `
      <div id="${noticeId}" class="notice notice-${settings.type} ${settings.dismissible ? 'is-dismissible' : ''}">
        <p>${message}</p>
        ${settings.dismissible ? '<button type="button" class="notice-dismiss"></button>' : ''}
      </div>
    `;
    
    this.cachedElements.$noticesContainer.append(noticeHTML);
    
    if (settings.duration > 0) {
      setTimeout(() => {
        $(`#${noticeId}`).fadeOut(() => $(this).remove());
      }, settings.duration);
    }
  }

  /**
   * متدهای کمکی
   */
  debounce(id, func, delay) {
    clearTimeout(this.debounceTimers[id]);
    this.debounceTimers[id] = setTimeout(func, delay);
  }

  getTabIndex(tabId) {
    return $(`.seokar-settings-tabs a`).index($(`.seokar-settings-tabs a[href*="tab=${tabId}"]`));
  }

  getCurrentTab() {
    return new URLSearchParams(window.location.search).get('tab') || 'general';
  }

  updateUrlHash(hash) {
    window.history.replaceState(null, null, `#${hash}`);
  }
}

// راه‌اندازی پس از بارگذاری کامل صفحه
jQuery(document).ready(function($) {
  if (typeof seokarOptions !== 'undefined') {
    window.seokarAdmin = new SeokarAdminPanel();
  } else {
    console.error('seokarOptions is not defined');
  }
});

// پشتیبانی از Customizer وردپرس
if (typeof wp !== 'undefined' && wp.customize) {
  wp.customize.bind('ready', function() {
    window.seokarAdmin = new SeokarAdminPanel();
  });
}
Admin = new SeokarAdminPanel();
  });
}
