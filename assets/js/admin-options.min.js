/**
 * مدیریت پیشرفته فرانت-اند پنل تنظیمات سئوکار - نسخه حرفه‌ای
 * 
 * @package    Seokar
 * @subpackage Admin
 * @author     Sajjad Akbari <sajjad.akbari.abc@gmail.com>
 * @license    GPL-3.0+
 * @version    3.2.0
 * @copyright  2025 تیم توسعه سئوکار
 */

class SeokarAdminPanel {
  constructor() {
    // تنظیمات اولیه
    this.version = '3.2.0';
    this.isProcessing = false;
    this.ajaxQueue = [];
    this.state = {
      activeTab: 'general',
      formStates: {},
      settings: {}
    };
    
    // کش عناصر DOM
    this.elements = {
      $wrap: null,
      $forms: null,
      $tabs: null,
      $tabContents: null,
      $notices: null
    };
    
    // زمان‌سنج‌ها
    this.timers = {
      debounce: {},
      delay: {}
    };
    
    // مقداردهی اولیه
    this.init();
  }

  /**
   * مقداردهی اولیه سیستم
   */
  init() {
    try {
      // بررسی وابستگی‌ها
      if (typeof jQuery === 'undefined') {
        throw new Error('jQuery is required');
      }
      
      if (typeof seokarOptions === 'undefined') {
        throw new Error('seokarOptions is not defined');
      }
      
      // کش کردن عناصر DOM
      this.cacheDOM();
      
      // راه‌اندازی اولیه
      this.setupEventListeners();
      this.initCoreComponents();
      this.restoreState();
      this.setupObservers();
      
      // بارگذاری اولیه تب
      this.loadInitialTab();
      
      console.info('Seokar Admin Panel v' + this.version + ' initialized');
    } catch (error) {
      console.error('Initialization error:', error);
      this.showError('خطا در راه‌اندازی پنل مدیریت: ' + error.message);
    }
  }

  /**
   * کش کردن عناصر پرکاربرد DOM
   */
  cacheDOM() {
    this.elements = {
      $wrap: $('.seokar-settings-wrap'),
      $forms: $('.seokar-settings-form'),
      $tabs: $('.seokar-settings-tabs'),
      $tabContents: $('.seokar-tab-content'),
      $notices: $('.seokar-notices-container'),
      $spinner: $('.seokar-spinner')
    };
  }

  /**
   * تنظیم رویدادهای اصلی
   */
  setupEventListeners() {
    // مدیریت تب‌ها
    $(document).on('click', '.seokar-settings-tab', (e) => this.handleTabSwitch(e));
    
    // مدیریت فرم‌ها
    $(document).on('submit', '.seokar-settings-form', (e) => this.handleFormSubmit(e));
    
    // مدیریت رسانه
    $(document).on('click', '.seokar-media-upload', (e) => this.handleMediaUpload(e));
    $(document).on('click', '.seokar-media-remove', (e) => this.handleMediaRemove(e));
    
    // مدیریت رنگ‌ها
    $(document).on('change', '.color-picker-field', (e) => this.updateColorPreview(e));
    
    // مدیریت ایمپورت/اکسپورت
    $(document).on('click', '.export-settings-btn', (e) => this.exportSettings(e));
    $(document).on('change', '#seokar-import-file', (e) => this.importSettings(e));
    
    // مدیریت فیلدهای شرطی
    $(document).on('change', '[data-conditional-trigger]', (e) => this.handleConditionalFields(e));
    
    // مدیریت دکمه‌ها
    $(document).on('click', '.seokar-reset-section', (e) => this.handleSectionReset(e));
    
    // رویدادهای سفارشی
    $(document).on('seokar_settings_changed', (e, data) => this.handleSettingsChange(data));
  }

  /**
   * مقداردهی کامپوننت‌های اصلی
   */
  initCoreComponents() {
    this.initTabs();
    this.initColorPickers();
    this.initTooltips();
    this.initConditionalFields();
  }

  /**
   * مقداردهی کامپوننت‌های وابسته به وردپرس
   */
  initDependentComponents() {
    if (typeof wp !== 'undefined') {
      this.initMediaUploaders();
      
      if (typeof wp.codeEditor !== 'undefined') {
        this.initCodeEditors();
      }
      
      if (typeof $.fn.select2 !== 'undefined') {
        this.initSelect2();
      }
    }
  }

  /**
   * راه‌اندازی سیستم تب‌ها
   */
  initTabs() {
    if (!this.elements.$tabs.length) return;
    
    this.elements.$tabs.tabs({
      active: this.getTabIndex(this.state.activeTab),
      activate: (event, ui) => {
        const tab = ui.newTab.data('tab');
        this.switchToTab(tab);
      },
      classes: {
        "ui-tabs-active": "active"
      }
    });
  }

  /**
   * راه‌اندازی انتخاب رنگ
   */
  initColorPickers() {
    $('.seokar-color-picker').each((i, el) => {
      const $el = $(el);
      
      $el.wpColorPicker({
        defaultColor: $el.data('default-color') || '#ffffff',
        change: (event, ui) => {
          this.debounce('color_change_' + $el.attr('id'), () => {
            $el.val(ui.color.toString()).trigger('change');
          }, 300);
        },
        clear: () => {
          $el.val('').trigger('change');
        }
      });
    });
  }

  /**
   * راه‌اندازی راهنماهای ابزاری
   */
  initTooltips() {
    $('.seokar-tooltip').tooltip({
      content: function() {
        return $(this).attr('data-tooltip');
      },
      position: {
        my: "center bottom-20",
        at: "center top",
        using: function(position, feedback) {
          $(this).css(position);
          $("<div>")
            .addClass("arrow " + feedback.vertical)
            .addClass(feedback.horizontal)
            .appendTo(this);
        }
      }
    });
  }

  /**
   * راه‌اندازی فیلدهای شرطی
   */
  initConditionalFields() {
    $('[data-conditional-trigger]').each((i, el) => {
      this.evaluateConditionalField($(el));
    });
  }

  /**
   * راه‌اندازی آپلودر رسانه
   */
  initMediaUploaders() {
    $('.seokar-media-upload').each((i, el) => {
      const $el = $(el);
      if ($el.data('init')) return;
      
      $el.data('init', true);
      // پیاده‌سازی در handleMediaUpload
    });
  }

  /**
   * راه‌اندازی ویرایشگر کد
   */
  initCodeEditors() {
    $('.seokar-code-editor').each((i, el) => {
      const $textarea = $(el);
      const editor = wp.codeEditor.initialize($textarea, {
        codemirror: {
          mode: $textarea.data('mode') || 'htmlmixed',
          lineNumbers: true,
          indentUnit: 4,
          theme: 'default'
        }
      });
      
      editor.codemirror.on('change', () => {
        $textarea.val(editor.codemirror.getValue()).trigger('change');
      });
    });
  }

  /**
   * راه‌اندازی Select2
   */
  initSelect2() {
    $('.seokar-select2').select2({
      width: '100%',
      minimumResultsForSearch: 10
    });
  }

  /**
   * بارگذاری اولیه تب
   */
  loadInitialTab() {
    const tab = this.getCurrentTabFromUrl() || this.state.activeTab;
    this.lazyLoadTabContent(tab);
  }

  /**
   * بارگذاری محتوای تب به صورت تنبل
   */
  lazyLoadTabContent(tab) {
    if (this.isProcessing) return;
    
    const $content = $(`#${tab}-content`);
    if (!$content.length || $content.data('loaded')) return;
    
    this.isProcessing = true;
    this.showLoading(true);
    
    $.ajax({
      url: seokarOptions.ajax_url,
      type: 'POST',
      data: {
        action: 'seokar_load_tab',
        tab: tab,
        nonce: seokarOptions.load_tab_nonce
      },
      success: (response) => {
        if (response.success) {
          $content.html(response.data.content).data('loaded', true);
          this.initDependentComponents();
          this.saveState();
        }
      },
      error: (xhr) => {
        this.showError('خطا در بارگذاری محتوای تب');
      },
      complete: () => {
        this.isProcessing = false;
        this.showLoading(false);
      }
    });
  }

  /**
   * مدیریت تغییر تب
   */
  handleTabSwitch(e) {
    e.preventDefault();
    const $tab = $(e.currentTarget);
    const tab = $tab.data('tab');
    
    if (this.isProcessing || !tab || tab === this.state.activeTab) return;
    
    this.switchToTab(tab);
  }

  /**
   * تغییر به تب مورد نظر
   */
  switchToTab(tab) {
    this.state.activeTab = tab;
    this.saveState();
    this.updateUrl(tab);
    this.lazyLoadTabContent(tab);
  }

  /**
   * مدیریت ارسال فرم
   */
  handleFormSubmit(e) {
    e.preventDefault();
    const $form = $(e.currentTarget);
    
    if (!this.validateForm($form)) return;
    
    this.enqueueAjaxRequest({
      url: $form.attr('action'),
      type: 'POST',
      data: $form.serialize(),
      $form: $form,
      beforeSend: () => this.showFormLoading($form, true),
      success: (response) => this.handleFormSuccess(response, $form),
      error: (xhr) => this.handleFormError(xhr, $form),
      complete: () => this.showFormLoading($form, false)
    });
  }

  /**
   * اضافه کردن درخواست به صف AJAX
   */
  enqueueAjaxRequest(request) {
    this.ajaxQueue.push(request);
    if (!this.isProcessing) {
      this.processAjaxQueue();
    }
  }

  /**
   * پردازش صف AJAX
   */
  processAjaxQueue() {
    if (this.ajaxQueue.length === 0) {
      this.isProcessing = false;
      return;
    }
    
    this.isProcessing = true;
    const request = this.ajaxQueue.shift();
    
    if (request.beforeSend) {
      request.beforeSend();
    }
    
    $.ajax({
      url: request.url,
      type: request.type || 'POST',
      data: request.data,
      dataType: 'json',
      success: (response) => {
        if (request.success) {
          request.success(response);
        }
      },
      error: (xhr) => {
        if (request.error) {
          request.error(xhr);
        }
      },
      complete: () => {
        if (request.complete) {
          request.complete();
        }
        this.processAjaxQueue();
      }
    });
  }

  /**
   * مدیریت موفقیت ارسال فرم
   */
  handleFormSuccess(response, $form) {
    if (response.success) {
      this.showNotice('success', response.data.message || 'تنظیمات با موفقیت ذخیره شد');
      $form.trigger('seokar_form_saved', [response]);
    } else {
      this.showNotice('error', response.data || 'خطا در ذخیره تنظیمات');
    }
  }

  /**
   * مدیریت خطای ارسال فرم
   */
  handleFormError(xhr, $form) {
    const message = xhr.responseJSON?.data || 'خطا در ارتباط با سرور';
    this.showNotice('error', message);
    $form.trigger('seokar_form_error', [xhr]);
  }

  /**
   * اعتبارسنجی فرم
   */
  validateForm($form) {
    let isValid = true;
    const $requiredFields = $form.find('[required]');
    
    $requiredFields.each((i, el) => {
      const $field = $(el);
      if (!$field.val()) {
        $field.addClass('error').focus();
        this.showNotice('error', 'لطفا تمام فیلدهای ضروری را پر کنید');
        isValid = false;
        return false;
      }
    });
    
    return isValid;
  }

  /**
   * مدیریت آپلود رسانه
   */
  handleMediaUpload(e) {
    e.preventDefault();
    const $button = $(e.currentTarget);
    const $input = $button.siblings('input');
    const $preview = $button.siblings('.seokar-media-preview');
    
    const frame = wp.media({
      title: $button.data('title') || 'انتخاب رسانه',
      button: { text: $button.data('button-text') || 'استفاده از این رسانه' },
      multiple: false
    });
    
    frame.on('select', () => {
      const attachment = frame.state().get('selection').first().toJSON();
      $input.val(attachment.url).trigger('change');
      
      if (attachment.type === 'image') {
        $preview.html(`<img src="${attachment.url}" alt="Preview">`).show();
      } else {
        $preview.text(attachment.filename).show();
      }
      
      $button.siblings('.seokar-media-remove').show();
    });
    
    frame.open();
  }

  /**
   * حذف رسانه
   */
  handleMediaRemove(e) {
    e.preventDefault();
    const $button = $(e.currentTarget);
    const $input = $button.siblings('input');
    const $preview = $button.siblings('.seokar-media-preview');
    
    $input.val('').trigger('change');
    $preview.empty().hide();
    $button.hide();
  }

  /**
   * به‌روزرسانی پیش‌نمایش رنگ
   */
  updateColorPreview(e) {
    const $input = $(e.currentTarget);
    const $preview = $input.siblings('.color-preview');
    
    if ($input.val()) {
      $preview.css('background-color', $input.val()).show();
    } else {
      $preview.hide();
    }
  }

  /**
   * خروجی گرفتن از تنظیمات
   */
  exportSettings(e) {
    e.preventDefault();
    const $button = $(e.currentTarget);
    const tab = $button.data('tab') || 'all';
    
    if (!confirm(seokarOptions.i18n.confirm_export)) return;
    
    $button.addClass('loading').text('در حال آماده‌سازی...');
    
    const exportUrl = seokarOptions.ajax_url + 
      '?action=seokar_export_settings&tab=' + tab + 
      '&nonce=' + seokarOptions.export_nonce;
    
    const $link = $('<a>', {
      href: exportUrl,
      style: 'display:none;',
      download: 'seokar-settings-' + tab + '-' + new Date().toISOString().slice(0, 10) + '.json'
    }).appendTo('body');
    
    $link[0].click();
    $link.remove();
    
    setTimeout(() => {
      $button.removeClass('loading').text('خروجی گرفتن تنظیمات');
    }, 1000);
  }

  /**
   * وارد کردن تنظیمات
   */
  importSettings(e) {
    const file = e.target.files[0];
    if (!file) return;
    
    if (!confirm(seokarOptions.i18n.confirm_import)) {
      $(e.target).val('');
      return;
    }
    
    const $form = $(e.target).closest('form');
    const $button = $form.find('.import-settings-btn');
    const formData = new FormData();
    
    formData.append('action', 'seokar_import_settings');
    formData.append('nonce', seokarOptions.import_nonce);
    formData.append('import_file', file);
    
    $button.addClass('loading').text('در حال وارد کردن...');
    
    $.ajax({
      url: seokarOptions.ajax_url,
      type: 'POST',
      data: formData,
      processData: false,
      contentType: false,
      success: (response) => {
        if (response.success) {
          this.showNotice('success', 'تنظیمات با موفقیت وارد شدند');
          setTimeout(() => location.reload(), 1000);
        } else {
          this.showNotice('error', response.data || 'خطا در وارد کردن تنظیمات');
        }
      },
      error: (xhr) => {
        this.showNotice('error', xhr.responseJSON?.data || 'خطا در ارتباط با سرور');
      },
      complete: () => {
        $button.removeClass('loading').text('وارد کردن تنظیمات');
        $(e.target).val('');
      }
    });
  }

  /**
   * مدیریت فیلدهای شرطی
   */
  handleConditionalFields(e) {
    const $trigger = $(e.currentTarget);
    this.evaluateConditionalField($trigger);
  }

  /**
   * ارزیابی فیلدهای شرطی
   */
  evaluateConditionalField($trigger) {
    const target = $trigger.data('conditional-trigger');
    const value = $trigger.val();
    const $target = $(`[data-conditional-target="${target}"]`);
    
    if (!$target.length) return;
    
    const requiredValues = $target.data('conditional-values');
    const shouldShow = requiredValues.includes(value);
    
    $target.toggle(shouldShow);
    $target.find('[required]').prop('required', shouldShow);
  }

  /**
   * بازنشانی بخش
   */
  handleSectionReset(e) {
    e.preventDefault();
    const $button = $(e.currentTarget);
    const section = $button.data('section');
    
    if (!confirm('آیا از بازنشانی این بخش مطمئن هستید؟ این عمل قابل بازگشت نیست.')) {
      return;
    }
    
    $button.addClass('loading').text('در حال بازنشانی...');
    
    $.post(seokarOptions.ajax_url, {
      action: 'seokar_reset_section',
      section: section,
      nonce: seokarOptions.nonce
    }, (response) => {
      if (response.success) {
        this.showNotice('success', 'بخش با موفقیت بازنشانی شد');
        setTimeout(() => location.reload(), 1000);
      } else {
        this.showNotice('error', response.data || 'خطا در بازنشانی بخش');
        $button.removeClass('loading').text('بازنشانی بخش');
      }
    });
  }

  /**
   * نمایش اعلان
   */
  showNotice(type, message, duration = 5000) {
    const noticeId = 'seokar-notice-' + Date.now();
    const $notice = $(`
      <div id="${noticeId}" class="notice notice-${type} is-dismissible">
        <p>${message}</p>
        <button type="button" class="notice-dismiss"></button>
      </div>
    `);
    
    this.elements.$notices.append($notice);
    
    $notice.on('click', '.notice-dismiss', () => {
      $notice.remove();
    });
    
    if (duration > 0) {
      setTimeout(() => {
        $notice.fadeOut(() => $notice.remove());
      }, duration);
    }
  }

  /**
   * نمایش وضعیت بارگذاری
   */
  showLoading(show) {
    if (show) {
      this.elements.$spinner.addClass('is-active');
    } else {
      this.elements.$spinner.removeClass('is-active');
    }
  }

  /**
   * نمایش وضعیت بارگذاری فرم
   */
  showFormLoading($form, show) {
    const $button = $form.find('.button-primary');
    const $spinner = $form.find('.spinner');
    
    if (show) {
      $button.prop('disabled', true);
      $spinner.addClass('is-active');
    } else {
      $button.prop('disabled', false);
      $spinner.removeClass('is-active');
    }
  }

  /**
   * ذخیره وضعیت فعلی
   */
  saveState() {
    localStorage.setItem('seokar_admin_state', JSON.stringify(this.state));
  }

  /**
   * بازیابی وضعیت قبلی
   */
  restoreState() {
    const savedState = localStorage.getItem('seokar_admin_state');
    if (savedState) {
      try {
        this.state = JSON.parse(savedState);
      } catch (e) {
        localStorage.removeItem('seokar_admin_state');
      }
    }
  }

  /**
   * تنظیم مشاهده‌گرها
   */
  setupObservers() {
    // مشاهده‌گر تغییرات DOM
    new MutationObserver((mutations) => {
      mutations.forEach((mutation) => {
        if (mutation.type === 'childList') {
          this.initCoreComponents();
        }
      });
    }).observe(this.elements.$wrap[0], {
      childList: true,
      subtree: true
    });
    
    // مشاهده‌گر تغییر URL
    window.addEventListener('popstate', () => {
      const tab = this.getCurrentTabFromUrl();
      if (tab && tab !== this.state.activeTab) {
        this.switchToTab(tab);
      }
    });
  }

  /**
   * به‌روزرسانی URL
   */
  updateUrl(tab) {
    const url = new URL(window.location);
    url.searchParams.set('tab', tab);
    window.history.pushState({ tab }, '', url);
  }

  /**
   * دریافت تب فعلی از URL
   */
  getCurrentTabFromUrl() {
    const params = new URLSearchParams(window.location.search);
    return params.get('tab');
  }

  /**
   * دریافت اندیس تب
   */
  getTabIndex(tab) {
    return $(`.seokar-settings-tab`).index($(`.seokar-settings-tab[data-tab="${tab}"]`));
  }

  /**
   * تاخیر در اجرای تابع
   */
  debounce(id, func, delay) {
    clearTimeout(this.timers.debounce[id]);
    this.timers.debounce[id] = setTimeout(func, delay);
  }

  /**
   * مدیریت تغییر تنظیمات
   */
  handleSettingsChange(data) {
    if (data && data.tab) {
      this.state.settings[data.tab] = data.settings;
      this.saveState();
    }
  }
}

// راه‌اندازی پس از بارگذاری کامل صفحه
jQuery(document).ready(function($) {
  if (typeof seokarOptions !== 'undefined') {
    window.seokarAdmin = new SeokarAdminPanel();
  }
});
